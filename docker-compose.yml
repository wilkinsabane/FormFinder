# FormFinder Docker Compose Configuration
# Provides complete development environment with PostgreSQL

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: formfinder-postgres
    environment:
      POSTGRES_DB: formfinder
      POSTGRES_USER: formfinder
      POSTGRES_PASSWORD: formfinder_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - formfinder-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U formfinder -d formfinder"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (for future caching and task queue)
  redis:
    image: redis:7-alpine
    container_name: formfinder-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - formfinder-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FormFinder Application (Development)
  formfinder-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: formfinder-dev
    environment:
      - FORMFINDER_ENV=development
      - DATABASE_TYPE=postgresql
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=formfinder
      - DATABASE_USER=formfinder
      - DATABASE_PASSWORD=formfinder_dev_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - formfinder_data:/app/data
      - formfinder_logs:/app/data/logs
    ports:
      - "8080:8080"  # For future web interface
    networks:
      - formfinder-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true
    restart: unless-stopped
    command: /bin/bash

  # FormFinder Application (Production-like)
  formfinder-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: formfinder-prod
    environment:
      - FORMFINDER_ENV=production
      - DATABASE_TYPE=postgresql
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=formfinder
      - DATABASE_USER=formfinder
      - DATABASE_PASSWORD=formfinder_dev_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - formfinder_data:/app/data
      - formfinder_logs:/app/data/logs
    networks:
      - formfinder-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - production

  # Prefect Server (for workflow orchestration UI)
  prefect-server:
    image: prefecthq/prefect:2-latest
    container_name: formfinder-prefect
    environment:
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_SERVER_API_PORT=4200
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://formfinder:formfinder_dev_password@postgres:5432/prefect
    ports:
      - "4200:4200"
    networks:
      - formfinder-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - prefect
    command: prefect server start --host 0.0.0.0

  # Grafana (for monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: formfinder-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - formfinder-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: formfinder-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - formfinder-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # pgAdmin (for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: formfinder-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@formfinder.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - formfinder-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

networks:
  formfinder-network:
    driver: bridge
    name: formfinder-network

volumes:
  postgres_data:
    name: formfinder-postgres-data
  redis_data:
    name: formfinder-redis-data
  formfinder_data:
    name: formfinder-app-data
  formfinder_logs:
    name: formfinder-logs
  grafana_data:
    name: formfinder-grafana-data
  prometheus_data:
    name: formfinder-prometheus-data
  pgadmin_data:
    name: formfinder-pgadmin-data