[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "formfinder"
version = "2.0.0"
authors = [
    {name = "FormFinder Team", email = "contact@formfinder.com"},
]
description = "A comprehensive football prediction system with database storage and workflow orchestration"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Games/Entertainment :: Sports",
]
keywords = [
    "football",
    "soccer",
    "prediction",
    "machine learning",
    "sports analytics",
    "data pipeline",
    "workflow orchestration",
    "database",
    "api",
]
dependencies = [
    "pandas>=2.2.2",
    "pydantic>=2.7.1",
    "pydantic-settings>=2.0.0",
    "PyYAML>=6.0.1",
    "requests>=2.31.0",
    "SQLAlchemy>=2.0.30",
    "alembic>=1.13.1",
    "prefect>=2.19.0",
    "prefect-sqlalchemy>=0.4.1",
    "structlog>=24.1.0",
    "rich>=13.7.1",
    "python-dotenv>=1.0.1",
    "click>=8.1.7",
]

[project.optional-dependencies]
dev = [
    "black>=24.4.2",
    "flake8>=7.0.0",
    "isort>=5.13.2",
    "mypy>=1.10.0",
    "pytest>=8.2.1",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.23.6",
    "pytest-benchmark>=4.0.0",
    "bandit>=1.7.8",
    "safety>=3.2.0",
    "pre-commit>=3.7.1",
    "factory-boy>=3.3.0",
    "freezegun>=1.5.1",
    "responses>=0.25.0",
]
postgresql = [
    "psycopg2-binary>=2.9.9",
]
sms = [
    "twilio>=9.0.4",
]
docs = [
    "sphinx>=7.3.7",
    "sphinx-rtd-theme>=2.0.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.18",
]
monitoring = [
    "psutil>=5.9.8",
    "memory-profiler>=0.61.0",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/FormFinder"
"Bug Reports" = "https://github.com/yourusername/FormFinder/issues"
"Source" = "https://github.com/yourusername/FormFinder"
"Documentation" = "https://formfinder.readthedocs.io/"
"Changelog" = "https://github.com/yourusername/FormFinder/blob/main/CHANGELOG.md"

[project.scripts]
formfinder = "formfinder.cli:main"
formfinder-workflow = "formfinder.workflows:cli"
formfinder-db = "formfinder.database:cli"

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["src"] by default)
include = ["formfinder*"]  # package names should match these glob patterns (["*"] by default)
exclude = ["tests*"]  # exclude packages matching these glob patterns (empty by default)

[tool.setuptools.package-data]
formfinder = [
    "config/*.yaml",
    "templates/*.html",
    "static/*",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | data
    | processed_data
    | logs
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["formfinder", "tests"]
skip_glob = ["data/*", "processed_data/*", "logs/*"]
known_first_party = ["formfinder"]
known_third_party = [
    "pandas",
    "pydantic",
    "yaml",
    "requests",
    "sqlalchemy",
    "alembic",
    "prefect",
    "structlog",
    "rich",
    "click",
    "pytest",
    "factory_boy",
    "freezegun",
    "responses",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "requests.*",
    "yaml.*",
    "prefect.*",
    "structlog.*",
    "rich.*",
    "twilio.*",
    "psutil.*",
    "memory_profiler.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "database: marks tests that require database",
    "api: marks tests that make API calls",
    "workflow: marks tests for workflow functionality",
    "performance: marks performance/benchmark tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::sqlalchemy.exc.SAWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["formfinder"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "setup.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

# Bandit test configurations
[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration